'''
Institution: Max-Planck Institution for Radioastronomy (MPIfR-Bonn)
    Auf dem Huegel 69, Bonn, Germany

Author: Niclas Eesser <nesser@mpifr-bonn.mpg.de>

Description
-----------
    This script reads raw data of a single subfrequency group (7MHz) specified by the numa ID
    from a single snapshots and plots Array Covariance Matrices (ACMs) of it.
    The input file(s) must be .dada files generated by dada_dbdisk-tool. All .dada files
    must contain binary data of the CODIF format (More detailed information of the CODIF
    format can be seen in the module 'inc/codif.py')
Preliminaries
-------------
    The script expects a predefined folder structure in which the raw data are stored:
    root_dir/
    |_______numaID/
    |        |______raw_file1.dada
    |        |______raw_file2.dada
    :        :
    |        |______raw_fileN.dada
    All files within the folder structure are automatically searched, but it is important
    that sub-folders have the name 'numa' + ID. Subfolder contains a subfrequency group of 7MHz bandwidth.
Program flow
------------
    0. Parse user arguments
    1. Create a CodifHandle object with all desired .dada files
    2. Compute/process ACM data from raw voltage data
    3. Plot and store results
'''
# Included modules
import argparse
import numpy as np
from argparse import RawTextHelpFormatter

# Custom modules
from inc.codif import *
from inc.utils import *


if __name__ == '__main__':
    ##############################
    # Start of arguments parsing #
    ##############################
    parser = argparse.ArgumentParser(description='options', formatter_class=RawTextHelpFormatter)
    parser.add_argument('--fname', '-f', action = "store", default = "*", dest = "fname", help = "Filename expression for raw data file (.dada). If this argument is not passed the script searches all files within the root directory passed by argument '-d'.")
    parser.add_argument('--dir', '-d', action = "store", default = "/beegfsEDD/NESSER/PAF-12-2020/2020-12-09/2020-12-09-15:57:51/", dest = "dir", help = "Directory of the root folder of one snapshot (filetype '.dada')")
    parser.add_argument('--nelements', '-n', action = "store", default=36, dest="nelements", help="Number of elements to read and plot. Default is 36")
    parser.add_argument('--output_dir', '-o', action = "store", default="", dest="odir", help="Output directory where to store plots and .txt file containing ACM data")
    parser.add_argument('--numa_id', '-i', action = "store", dest="node_id", help="Numa node ID of a subfrequency group")
    # Assign arguments to variables for readability
    fname = parser.parse_args().fname
    dir = check_slash(parser.parse_args().dir)
    odir = check_slash(parser.parse_args().odir)
    id = parser.parse_args().node_id
    nelements = int(parser.parse_args().nelements)
    # Parse complete directory name
    if "numa" not in dir:
        dir += "numa" + str(id) + "/"
    # Get all desired files
    files = get_file_list(dir, fname + "*")
    if files == []:
        print("No files found, gets aborted")
        sys.exit(0)
    ##############################
    #  End of arguments parsing  #
    ##############################

    # 1. Create a CodifHandle object with all desired .dada files
    handler = CodifHandler(files)
    # 2. Compute/process ACM data from raw voltage data
    acm, freq = handler.compute_acm(nelements)
    # 3. Plot and store results
    if odir != "":
        odir = check_slash(odir)
        check_dir(odir)
        check_dir(odir + "numa" + str(id))
        for fidx, f in enumerate(freq):
            np.savetxt(odir + "numa" + str(id) + "/acm_" + str(f) + " _mhz.txt", acm[fidx])
    plot_acm(acm, freq, dir=odir)
